{"ast":null,"code":"var _jsxFileName = \"/Users/vilhelmirintanen/IntroDS_Project/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\n// src/App.tsx\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { AnimeCard } from \"./Components/AnimeCard\";\nimport Choices from \"./Components/Choices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || \"\"; // CRA-style env\n\nfunction App() {\n  _s();\n\n  const [recommendations, setRecommendations] = useState([]); // colors for cards\n\n  const colors = [\"bg-red-200\", \"bg-blue-200\", \"bg-gray-200\", \"bg-amber-200\", \"bg-lime-500\", \"bg-teal-300\", \"bg-violet-300\", \"bg-fuchsia-200\", \"bg-indigo-100\", \"bg-sky-200\", \"bg-emerald-100\"];\n\n  const getRecommendations = async function (genres, description) {\n    let sort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"SCORE_DESC\";\n\n    try {\n      const payload = {\n        genres,\n        description,\n        sort\n      }; // if API_BASE is empty, we call the dev proxy (/recommendations)\n\n      const url = API_BASE !== \"\" ? `${API_BASE}/recommendations` : \"/recommendations\";\n      const res = await axios.post(url, payload); // backend should return an array\n\n      const data = Array.isArray(res.data) ? res.data : []; // add UI-only data (like random color) here\n\n      const withColors = data.map(item => ({ ...item,\n        col: colors[Math.floor(Math.random() * colors.length)]\n      }));\n      setRecommendations(withColors);\n    } catch (error) {\n      console.error(\"Failed to fetch recommendations:\", error);\n      setRecommendations([]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mb-3 min-h-screen flex flex-col gap-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App flex flex-col gap-2 px-4 pt-4\",\n      children: /*#__PURE__*/_jsxDEV(Choices, {\n        getRecommendations: getRecommendations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4 mx-4 pb-6\",\n      children: recommendations.map(anime => {\n        var _anime$id;\n\n        return /*#__PURE__*/_jsxDEV(AnimeCard, { ...anime\n        }, (_anime$id = anime.id) !== null && _anime$id !== void 0 ? _anime$id : anime.title.romaji, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lZam4mchXM3IVSCDofmT1kt1xK4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","AnimeCard","Choices","API_BASE","process","env","REACT_APP_API_BASE","App","recommendations","setRecommendations","colors","getRecommendations","genres","description","sort","payload","url","res","post","data","Array","isArray","withColors","map","item","col","Math","floor","random","length","error","console","anime","id","title","romaji"],"sources":["/Users/vilhelmirintanen/IntroDS_Project/frontend/src/App.tsx"],"sourcesContent":["// src/App.tsx\nimport React, { useState } from \"react\"\nimport axios from \"axios\"\nimport { AnimeCard } from \"./Components/AnimeCard\"\nimport Choices from \"./Components/Choices\"\nimport { AnimeCardData } from \"./types\"\n\nconst API_BASE = process.env.REACT_APP_API_BASE || \"\" // CRA-style env\n\nfunction App() {\n  const [recommendations, setRecommendations] = useState<AnimeCardData[]>([])\n\n  // colors for cards\n  const colors = [\n    \"bg-red-200\",\n    \"bg-blue-200\",\n    \"bg-gray-200\",\n    \"bg-amber-200\",\n    \"bg-lime-500\",\n    \"bg-teal-300\",\n    \"bg-violet-300\",\n    \"bg-fuchsia-200\",\n    \"bg-indigo-100\",\n    \"bg-sky-200\",\n    \"bg-emerald-100\",\n  ]\n\n  const getRecommendations = async (\n    genres: string,\n    description: string | undefined,\n    sort: string = \"SCORE_DESC\"\n  ): Promise<void> => {\n    try {\n      const payload = { genres, description, sort }\n\n      // if API_BASE is empty, we call the dev proxy (/recommendations)\n      const url =\n        API_BASE !== \"\"\n          ? `${API_BASE}/recommendations`\n          : \"/recommendations\"\n\n      const res = await axios.post(url, payload)\n\n      // backend should return an array\n      const data = Array.isArray(res.data) ? res.data : []\n\n      // add UI-only data (like random color) here\n      const withColors: AnimeCardData[] = data.map((item) => ({\n        ...item,\n        col: colors[Math.floor(Math.random() * colors.length)],\n      }))\n\n      setRecommendations(withColors)\n    } catch (error) {\n      console.error(\"Failed to fetch recommendations:\", error)\n      setRecommendations([])\n    }\n  }\n\n  return (\n    <div className=\"mb-3 min-h-screen flex flex-col gap-4\">\n      {/* top controls */}\n      <div className=\"App flex flex-col gap-2 px-4 pt-4\">\n        <Choices getRecommendations={getRecommendations} />\n      </div>\n\n      {/* cards grid */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 xl:grid-cols-8 gap-4 mx-4 pb-6\">\n        {recommendations.map((anime) => (\n          <AnimeCard\n            key={anime.id ?? anime.title.romaji}\n            {...anime}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,OAAP,MAAoB,sBAApB;;AAGA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,IAAkC,EAAnD,C,CAAsD;;AAEtD,SAASC,GAAT,GAAe;EAAA;;EACb,MAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAkB,EAAlB,CAAtD,CADa,CAGb;;EACA,MAAMW,MAAM,GAAG,CACb,YADa,EAEb,aAFa,EAGb,aAHa,EAIb,cAJa,EAKb,aALa,EAMb,aANa,EAOb,eAPa,EAQb,gBARa,EASb,eATa,EAUb,YAVa,EAWb,gBAXa,CAAf;;EAcA,MAAMC,kBAAkB,GAAG,gBACzBC,MADyB,EAEzBC,WAFyB,EAIP;IAAA,IADlBC,IACkB,uEADH,YACG;;IAClB,IAAI;MACF,MAAMC,OAAO,GAAG;QAAEH,MAAF;QAAUC,WAAV;QAAuBC;MAAvB,CAAhB,CADE,CAGF;;MACA,MAAME,GAAG,GACPb,QAAQ,KAAK,EAAb,GACK,GAAEA,QAAS,kBADhB,GAEI,kBAHN;MAKA,MAAMc,GAAG,GAAG,MAAMjB,KAAK,CAACkB,IAAN,CAAWF,GAAX,EAAgBD,OAAhB,CAAlB,CATE,CAWF;;MACA,MAAMI,IAAI,GAAGC,KAAK,CAACC,OAAN,CAAcJ,GAAG,CAACE,IAAlB,IAA0BF,GAAG,CAACE,IAA9B,GAAqC,EAAlD,CAZE,CAcF;;MACA,MAAMG,UAA2B,GAAGH,IAAI,CAACI,GAAL,CAAUC,IAAD,KAAW,EACtD,GAAGA,IADmD;QAEtDC,GAAG,EAAEf,MAAM,CAACgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBlB,MAAM,CAACmB,MAAlC,CAAD;MAF2C,CAAX,CAAT,CAApC;MAKApB,kBAAkB,CAACa,UAAD,CAAlB;IACD,CArBD,CAqBE,OAAOQ,KAAP,EAAc;MACdC,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;MACArB,kBAAkB,CAAC,EAAD,CAAlB;IACD;EACF,CA9BD;;EAgCA,oBACE;IAAK,SAAS,EAAC,uCAAf;IAAA,wBAEE;MAAK,SAAS,EAAC,mCAAf;MAAA,uBACE,QAAC,OAAD;QAAS,kBAAkB,EAAEE;MAA7B;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAFF,eAOE;MAAK,SAAS,EAAC,+EAAf;MAAA,UACGH,eAAe,CAACe,GAAhB,CAAqBS,KAAD;QAAA;;QAAA,oBACnB,QAAC,SAAD,OAEMA;QAFN,gBACOA,KAAK,CAACC,EADb,iDACmBD,KAAK,CAACE,KAAN,CAAYC,MAD/B;UAAA;UAAA;UAAA;QAAA,QADmB;MAAA,CAApB;IADH;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAkBD;;GApEQ5B,G;;KAAAA,G;AAsET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}